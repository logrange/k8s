#!/usr/bin/env bash

function check {
    code=$1;
    if [[ ${code} -ne 0 ]]; then
        echo "ERROR!"
        exit ${code}
    fi
}

function save {
    out="$1"
    name=$(echo "${out}" | head -n 1 | awk -F ':' '{print $2}' | tr -d " ")
    echo ${name} >> ${INSTALL_FILE}
}

function get_labeled_node() {
    label=$1
    kubectl get nodes --output=json --selector=${label} | jq -r '.items[0].metadata.name'
}

function add_node_label() {
    node=$1
    label=$2
    kubectl label nodes ${node} ${label}= > /dev/nul
}

function del_node_label() {
    node=$1
    label=$2
    kubectl label nodes ${node} ${label}- > /dev/nul
}

function prompt() {
    msg=$1
    echo "${msg} (yes/no)"
    read answer </dev/tty
    if [[ ${answer} != "yes" ]]; then
        exit 0
    fi
}

################# Main #################

INSTALL_FILE=~/.logrange
LOGRANG_LABL="logrange.io/node"

echo "Checking helm..."
helm init --client-only > /dev/null
check $?

echo "Checking kubectl..."
kubectl cluster-info > /dev/null
check $?

### install
if [[ ! -f ${INSTALL_FILE} ]]; then
    prompt "No logrange installation found, proceed with installation?"

    echo "Adding helm repo..."
    out=$(helm repo add logrange https://raw.githubusercontent.com/logrange/k8s/master/charts/_repo/)
    check $?

    node=$(get_labeled_node ${LOGRANG_LABL})
    check $?

    if [[ ${node} != "null" ]]; then
       echo "Using node=${node} with ${LOGRANG_LABL} label..."
    else
        node=$(get_labeled_node)
        check $?
        if [[ ${node} != "null" ]]; then
            echo "Adding ${LOGRANG_LABL} label to node=${node}..."
            add_node_label ${node} ${LOGRANG_LABL}
            check $?
        fi
    fi

    echo "Installing helm logrange/lr-configs..."
    out=$(helm install logrange/lr-configs)
    check $?
    save "${out}"

    echo "Installing helm logrange/lr-logrange..."
    out=$(helm install logrange/lr-logrange)
    check $?
    save "${out}"

    echo "Installing helm logrange/lr-collector..."
    out=$(helm install logrange/lr-collector)
    check $?
    save "${out}"

    echo "Installing helm logrange/lr-forwarder..."
    out=$(helm install logrange/lr-forwarder)
    check $?
    save "${out}"

### remove
else
    prompt "Existing logrange installation found, proceed with removal?"

    while IFS='' read -r line || [[ -n "$line" ]]; do
        echo "Removing helm ${line}..."
        helm delete ${line} > /dev/nul
        check $?
    done < ${INSTALL_FILE}

#
# No label remove, until data is removed...
#
#    node=$(get_labeled_node ${LOGRANG_LABL})
#    check $?
#    if [[ ${node} != "null" ]]; then
#        echo "Removing ${LOGRANG_LABL} label from node=${node}..."
#        del_node_label ${node} ${LOGRANG_LABL}
#        check $?
#    fi

    echo "Removing ${INSTALL_FILE} file..."
    rm ${INSTALL_FILE}
fi

echo "Done!"